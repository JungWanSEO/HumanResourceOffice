# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: SpringBoot Docker CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs: # 병렬로 실행되는 작업 단위, 여러 step으로 이루어짐
  build:
    runs-on: ubuntu-latest  # 스크립트를 작동할 OS
    env: 
      working-directory: ./backend
    steps:
    - uses: actions/checkout@v4   # 재사용 가능한 워크플로 파일의 위치 및 버전
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # ./gradlw 실행 권한 부여
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      working-directory: ${{ env.working-directory }}
      
    # 프로젝트 build
    - name: Build with Gradle
      run: ./gradlew build
      working-directory: ${{ env.working-directory }}

    # Docker build & Push 
    - name: Docker build & push to Docker hub
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -t ${{ secrets.DOCKER_USERNAME }}/docker-human .
        docker push ${{ secrets.DOCKER_USERNAME }}/docker-human

    # EC2 배포
    - name: Docker image pull & Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }} # EC2 인스턴스 퍼블릭 DNS
        username: ubuntu
        key: ${{ secrets.EC2_PRIVATE_KEY }} # pem 키
        # 도커 작업
        script: |
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/docker-test:latest
          sudo docker stop $(sudo docker ps -a -q)
          sudo docker run -d --log-driver=syslog -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/docker-test:latest
          sudo docker rm $(sudo docker ps --filter 'status=exited' -a -q)
          sudo docker image prune -a -f
